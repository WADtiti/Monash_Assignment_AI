import argparse as apimport reimport platform######## RUNNING THE CODE #####################################################   You can run this code from terminal by executing the following command#   python planpath.py <INPUT/input#.txt> <OUTPUT/output#.txt> <flag>#   for example: python planpath.py INPUT/input2.txt OUTPUT/output2.txt 0#   NOTE: THIS IS JUST ONE EXAMPLE INPUT DATA################################################################################################# YOUR CODE GOES HERE ########################################def graphsearch(map, flag):    size=int(map[0][0]) #the number of rows and columns in the map    del map[0] #obtain the map    start=[]    goal=[]    for i in range(0,size):        for j in range(0,size):            if str(map[i][j])==str('S'):                start.append(i)                start.append(j)            if str(map[i][j])==str('G'):                goal.append(i)                goal.append(j)    ##### g_values are initially set as +infinity except the start cell###    g_values=[[float('+inf')]*size for i in range(size)]    g_values[start[0]][start[1]]=0    ##########    last=[[-1]*size for i in range(size)] #use last to represent the parent of the cell    #### h(n)=max{|the row number of n - the row number of goal|,|the col number of n - the col number of goal|}    h_values=[[0]*size for i in range(size)]    for i in range(0,size):        for j in range(0,size):            h_values[i][j]=max(abs(i-goal[0]),abs(j-goal[1]))    f_values=[[0]*size for i in range(size)]    for i in range(0,size):        for j in range(0,size):            f_values[i][j]=g_values[i][j]+h_values[i][j]    open_list=[start]    closed_list=[]    while len(open_list)!=0:        f_min=float('+inf')        index_min=0        for i in range(len(open_list)):            if f_values[open_list[i][0]][open_list[i][1]]<f_min:                f_min=f_values[open_list[i][0]][open_list[i][1]]                index_min=i        closed_list.append(open_list[index_min])        current_cell=open_list[index_min]        del open_list[index_min]        current_row=current_cell[0]        current_col=current_cell[1]        if current_row-1>=0 and [current_row-1,current_col] not in closed_list:            if map[current_row-1][current_col]==str('G'):                last[current_row-1][current_col]=current_cell                g_values[goal[0]][goal[1]]=g_values[current_row][current_col]+2                f_values[goal[0]][goal[1]]=g_values[goal[0]][goal[1]]                break            if map[current_row-1][current_col]==str('R'):                if [current_row-1,current_col] in open_list:                    if g_values[current_row-1][current_col]>g_values[current_row][current_col]+2: ###update g_values                        g_values[current_row-1][current_col]=g_values[current_row][current_col]+2                        f_values[current_row-1][current_col]=g_values[current_row-1][current_col]+h_values[current_row-1][current_col]                        last[current_row-1][current_col]=current_cell                else:                    open_list.append([current_row-1,current_col])                    g_values[current_row-1][current_col]=g_values[current_row][current_col]+2                    f_values[current_row - 1][current_col] = g_values[current_row - 1][current_col] + \                                                             h_values[current_row - 1][current_col]                    last[current_row - 1][current_col] = current_cell        if current_row+1<size and [current_row+1,current_col] not in closed_list:            if map[current_row+1][current_col]==str('G'):                last[current_row+1][current_col]=current_cell                g_values[goal[0]][goal[1]]=g_values[current_row][current_col]+2                f_values[goal[0]][goal[1]]=g_values[goal[0]][goal[1]]                break            if map[current_row+1][current_col]==str('R'):                if [current_row+1,current_col] in open_list:                    if g_values[current_row+1][current_col]>g_values[current_row][current_col]+2: ###update g_values                        g_values[current_row+1][current_col]=g_values[current_row][current_col]+2                        f_values[current_row+1][current_col]=g_values[current_row+1][current_col]+h_values[current_row+1][current_col]                        last[current_row+1][current_col]=current_cell                else:                    open_list.append([current_row+1,current_col])                    g_values[current_row+1][current_col]=g_values[current_row][current_col]+2                    f_values[current_row + 1][current_col] = g_values[current_row + 1][current_col] + \                                                             h_values[current_row + 1][current_col]                    last[current_row + 1][current_col] = current_cell        if current_col-1>=0 and [current_row,current_col-1] not in closed_list:            if map[current_row][current_col-1]==str('G'):                last[current_row][current_col-1]=current_cell                g_values[goal[0]][goal[1]]=g_values[current_row][current_col]+2                f_values[goal[0]][goal[1]]=g_values[goal[0]][goal[1]]                break            if map[current_row][current_col-1]==str('R'):                if [current_row,current_col-1] in open_list:                    if g_values[current_row][current_col-1]>g_values[current_row][current_col]+2: ###update g_values                        g_values[current_row][current_col-1]=g_values[current_row][current_col]+2                        f_values[current_row][current_col-1]=g_values[current_row][current_col-1]+h_values[current_row][current_col-1]                        last[current_row][current_col-1]=current_cell                else:                    open_list.append([current_row,current_col-1])                    g_values[current_row][current_col-1]=g_values[current_row][current_col]+2                    f_values[current_row ][current_col-1] = g_values[current_row ][current_col-1] + \                                                             h_values[current_row ][current_col-1]                    last[current_row][current_col-1] = current_cell        if current_col+1<size and [current_row,current_col+1]not in closed_list:            if map[current_row][current_col+1]==str('G'):                last[current_row][current_col+1]=current_cell                g_values[goal[0]][goal[1]]=g_values[current_row][current_col]+2                f_values[goal[0]][goal[1]]=g_values[goal[0]][goal[1]]                break            if map[current_row][current_col+1]==str('R'):                if [current_row,current_col+1] in open_list:                    if g_values[current_row][current_col+1]>g_values[current_row][current_col]+2: ###update g_values                        g_values[current_row][current_col+1]=g_values[current_row][current_col]+2                        f_values[current_row][current_col+1]=g_values[current_row][current_col+1]+h_values[current_row][current_col+1]                        last[current_row][current_col+1]=current_cell                else:                    open_list.append([current_row,current_col+1])                    g_values[current_row][current_col+1]=g_values[current_row][current_col]+2                    f_values[current_row ][current_col+1] = g_values[current_row ][current_col+1] + \                                                             h_values[current_row ][current_col+1]                    last[current_row][current_col+1] = current_cell        if current_row-1>=0 and current_col+1 <size and map[current_row][current_col+1]!=str('X') and map[current_row-1][current_col]!=str('X') \            and map[current_row-1][current_col+1]!=str('X') and [current_row-1,current_col+1]not in closed_list:            if map[current_row-1][current_col+1]==str('G'):                last[current_row-1][current_col+1]=current_cell                g_values[goal[0]][goal[1]]=g_values[current_row][current_col]+1                f_values[goal[0]][goal[1]]=g_values[goal[0]][goal[1]]                break            if map[current_row-1][current_col+1]==str('R'):                if [current_row-1,current_col+1] in open_list:                    if g_values[current_row-1][current_col+1]>g_values[current_row][current_col]+1: ###update g_values                        g_values[current_row-1][current_col+1]=g_values[current_row][current_col]+1                        f_values[current_row-1][current_col+1]=g_values[current_row-1][current_col+1]+h_values[current_row-1][current_col+1]                        last[current_row-1][current_col+1]=current_cell                else:                    open_list.append([current_row-1,current_col+1])                    g_values[current_row-1][current_col+1]=g_values[current_row][current_col]+1                    f_values[current_row-1][current_col+1] = g_values[current_row-1][current_col+1] + \                                                             h_values[current_row-1][current_col+1]                    last[current_row-1][current_col+1] = current_cell        if current_row-1>=0 and current_col-1>=0 and map[current_row][current_col-1]!=str('X') \                and map[current_row-1][current_col]!=str('X') \                and map[current_row-1][current_col-1]!=str('X')\                and [current_row-1,current_col-1]not in closed_list:            if map[current_row-1][current_col-1]==str('G'):                last[current_row-1][current_col-1]=current_cell                g_values[goal[0]][goal[1]]=g_values[current_row][current_col]+1                f_values[goal[0]][goal[1]]=g_values[goal[0]][goal[1]]                break            if map[current_row-1][current_col-1]==str('R'):                if [current_row-1,current_col-1] in open_list:                    if g_values[current_row-1][current_col-1]>g_values[current_row][current_col]+1: ###update g_values                        g_values[current_row-1][current_col-1]=g_values[current_row][current_col]+1                        f_values[current_row-1][current_col-1]=g_values[current_row-1][current_col-1]+h_values[current_row-1][current_col-1]                        last[current_row-1][current_col-1]=current_cell                else:                    open_list.append([current_row-1,current_col-1])                    g_values[current_row-1][current_col-1]=g_values[current_row][current_col]+1                    f_values[current_row-1][current_col-1] = g_values[current_row-1][current_col-1] + \                                                             h_values[current_row-1][current_col-1]                    last[current_row-1][current_col-1] = current_cell        if current_row+1<size and current_col-1>=0 and map[current_row][current_col-1]!=str('X')\                and map[current_row+1][current_col]!=str('X')and map[current_row+1][current_col-1]!=str('X')\                and [current_row+1,current_col-1]not in closed_list:            if map[current_row+1][current_col-1]==str('G'):                last[current_row+1][current_col-1]=current_cell                g_values[goal[0]][goal[1]]=g_values[current_row][current_col]+1                f_values[goal[0]][goal[1]]=g_values[goal[0]][goal[1]]                break            if map[current_row+1][current_col-1]==str('R'):                if [current_row+1,current_col-1] in open_list:                    if g_values[current_row+1][current_col-1]>g_values[current_row][current_col]+1: ###update g_values                        g_values[current_row+1][current_col-1]=g_values[current_row][current_col]+1                        f_values[current_row+1][current_col-1]=g_values[current_row+1][current_col-1]+h_values[current_row+1][current_col-1]                        last[current_row+1][current_col-1]=current_cell                else:                    open_list.append([current_row+1,current_col-1])                    g_values[current_row+1][current_col-1]=g_values[current_row][current_col]+1                    f_values[current_row+1][current_col-1] = g_values[current_row+1][current_col-1] + \                                                             h_values[current_row+1][current_col-1]                    last[current_row+1][current_col-1] = current_cell        if current_row+1<size and current_col+1<size and map[current_row][current_col+1]!=str('X') and \                map[current_row+1][current_col]!=str('X') and map[current_row+1][current_col+1]!=str('X')\                and [current_row+1,current_col+1]not in closed_list:            if map[current_row+1][current_col+1]==str('G'):                last[current_row+1][current_col+1]=current_cell                g_values[goal[0]][goal[1]]=g_values[current_row][current_col]+1                f_values[goal[0]][goal[1]]=g_values[goal[0]][goal[1]]                break            if map[current_row+1][current_col+1]==str('R'):                if [current_row+1,current_col+1] in open_list:                    if g_values[current_row+1][current_col+1]>g_values[current_row][current_col]+1: ###update g_values                        g_values[current_row+1][current_col+1]=g_values[current_row][current_col]+1                        f_values[current_row+1][current_col+1]=g_values[current_row+1][current_col+1]+h_values[current_row+1][current_col+1]                        last[current_row+1][current_col+1]=current_cell                else:                    open_list.append([current_row+1,current_col+1])                    g_values[current_row+1][current_col+1]=g_values[current_row][current_col]+1                    f_values[current_row+1][current_col+1] = g_values[current_row+1][current_col+1] + \                                                             h_values[current_row+1][current_col+1]                    last[current_row+1][current_col+1] = current_cell    if last[goal[0]][goal[1]]==-1:        return"NO PATH"    path=[]    cell=goal    while cell!=start:        path.append(cell)        cell=last[cell[0]][cell[1]]    path.append(start)    action="S"    solution=""    #####the start node####    for i in range(size):        for j in range(size):            solution=solution+str(map[i][j])        solution=solution+"\n"    solution=solution+"\nS 0\n\n"#the output from second node to the node before "G"    for seq in range(len(path)-2,0,-1):        now_row=path[seq][0]        now_col=path[seq][1]        for i in range(size):            for j in range(size):                if i==now_row and j==now_col:                    solution=solution+"*"                else:                    solution=solution+str(map[i][j])            solution=solution+"\n"        solution=solution+"\n"        action=action+"-"        previous_row=path[seq+1][0]        previous_col=path[seq+1][1]        if now_col-previous_col==1:            action+="R"        if now_col-previous_col==-1:            action+="L"        if now_row-previous_row==1:            action+="D"        if now_row-previous_row==-1:            action+="U"        solution=solution+action+" "        solution+=str(f_values[now_row][now_col])        solution+="\n\n"    ######reach the goal node####    for i in range(size):        for j in range(size):            solution = solution + str(map[i][j])        solution = solution + "\n"    solution = solution + "\n"    action = action + "-"    now_row=path[0][0]    now_col=path[0][1]    previous_row = path[1][0]    previous_col = path[1][1]    if now_col - previous_col == 1:        action += "R"    if now_col - previous_col == -1:        action += "L"    if now_row - previous_row == 1:        action += "D"    if now_row - previous_row == -1:        action += "U"    solution = solution + action + "-G"+" "    solution += str(f_values[now_row][now_col])    #solution = "S-R-RD-D-D-LD-G"    return solution    #print(map)def read_from_file(file_name):    # You can change the file reading function to suit the way    # you want to parse the file    file_handle = open(file_name)    map = file_handle.readlines()    return map########################################################################################## DO NOT CHANGE ANYTHING BELOW #####################################################################################################################def write_to_file(file_name, solution):    file_handle = open(file_name, 'w')    file_handle.write(solution)def main():    # create a parser object    parser = ap.ArgumentParser()    # specify what arguments will be coming from the terminal/commandline    parser.add_argument("input_file_name", help="specifies the name of the input file", type=str)    parser.add_argument("output_file_name", help="specifies the name of the output file", type=str)    parser.add_argument("flag", help="specifies the number of steps that should be printed", type=int)    # parser.add_argument("procedure_name", help="specifies the type of algorithm to be applied, can be D, A", type=str)    # get all the arguments    arguments = parser.parse_args()############################################################################### these print statements are here to check if the arguments are correct.#    print("The input_file_name is " + arguments.input_file_name)#    print("The output_file_name is " + arguments.output_file_name)#    print("The flag is " + str(arguments.flag))#    print("The procedure_name is " + arguments.procedure_name)##############################################################################    # Extract the required arguments    operating_system = platform.system()    if operating_system == "Windows":        input_file_name = arguments.input_file_name        input_tokens = input_file_name.split("\\")        if not re.match(r"(INPUT\\input)(\d)(.txt)", input_file_name):            print("Error: input path should be of the format INPUT\input#.txt")            return -1        output_file_name = arguments.output_file_name        output_tokens = output_file_name.split("\\")        if not re.match(r"(OUTPUT\\output)(\d)(.txt)", output_file_name):            print("Error: output path should be of the format OUTPUT\output#.txt")            return -1    else:        input_file_name = arguments.input_file_name        input_tokens = input_file_name.split("/")        if not re.match(r"(INPUT/input)(\d)(.txt)", input_file_name):            print("Error: input path should be of the format INPUT/input#.txt")            return -1        output_file_name = arguments.output_file_name        output_tokens = output_file_name.split("/")        if not re.match(r"(OUTPUT/output)(\d)(.txt)", output_file_name):            print("Error: output path should be of the format OUTPUT/output#.txt")            return -1    flag = arguments.flag    # procedure_name = arguments.procedure_name    try:        map = read_from_file(input_file_name) # get the map    except FileNotFoundError:        print("input file is not present")        return -1    # print(map)        solution_string = "" # contains solution    solution_string = graphsearch(map, flag)    write_flag = 1        # call function write to file only in case we have a solution    if write_flag == 1:        write_to_file(output_file_name, solution_string)if __name__ == "__main__":    main()